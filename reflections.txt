How did viewing a diff between two versions of a file help you see the bug that was introduced?

The computer automatically helps find the differences between the two files. All you have to do
is to see those differences and work out what change caused an error in the code. This makes it
a lot easier especially if the two files are big since it saves time.

Sometimes on small files you can spot the differences by eye. But it would be very tedious to 
do it on big projects.



How could having easy access to the entire history of a file make you a moreefficient programmer in the long term?
You will be able to track the changes and also the dates of the change. So that when you want to edit a 
version, you can always revert back to it.

What do you think are the pros and cons of manually choosing when to create acommit, like you do in Git, vs having versions automatically saved, like Googledocs does?

When you manually commit, you might make big changes from one version to the next. However in Google
docs, since it automatically saves versions you can revert back in small steps. On the other hand, if you manually
commit you can be sure that is a marker in a stage of your code completed so you have more control.

Why do you think some version control systems, like Git, allow saving multiplefiles in one commit, while others, like Google Docs, treat each file separately?

Perhaps saving multiple files in one commit helps you better see the changes in a project. Whereas in Google Docs, 
the files are treated separately because it is better to share the files separately with colleagues.
 
How can you use the commands git log and git diff to view the history of files?

You use git diff to see the differences between the two files and git log to see the history of changes.

How might using version control make you more confident to make changes thatcould break something?

You can commit something that definitely works and then make small changes with the insurance that you can always
revert back to the old version.

Now that you have your workspace set up, what do you want to try using Git for?

Version control for any programming project.

From <https://storage.googleapis.com/supplemental_media/udacityu/2997518619/lesson_1_reflection_prompts.txt> 
